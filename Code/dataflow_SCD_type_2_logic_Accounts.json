{
    "name": "df_accounts_SCD2",
    "properties": {
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "linkedService": {
                        "referenceName": "AzureDataLakeStorage1",
                        "type": "LinkedServiceReference"
                    },
                    "name": "source"
                },
                {
                    "linkedService": {
                        "referenceName": "ls_sql_db",
                        "type": "LinkedServiceReference"
                    },
                    "name": "target"
                }
            ],
            "sinks": [
                {
                    "linkedService": {
                        "referenceName": "ls_sql_db",
                        "type": "LinkedServiceReference"
                    },
                    "name": "UpdateSink"
                },
                {
                    "linkedService": {
                        "referenceName": "ls_sql_db",
                        "type": "LinkedServiceReference"
                    },
                    "name": "InsertSink"
                }
            ],
            "transformations": [
                {
                    "name": "AddHashkeycolumn"
                },
                {
                    "name": "Lookup"
                },
                {
                    "name": "RenameColumns"
                },
                {
                    "name": "split"
                },
                {
                    "name": "AuditColumns"
                },
                {
                    "name": "alterRow"
                },
                {
                    "name": "union"
                },
                {
                    "name": "AuditColumn"
                }
            ],
            "scriptLines": [
                "source(output(",
                "          AccountId as short,",
                "          CustomerId as short,",
                "          AccountType as string,",
                "          Balance as double",
                "     ),",
                "     useSchema: false,",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     format: 'delimited',",
                "     fileSystem: 'medallion',",
                "     columnDelimiter: ',',",
                "     escapeChar: '\\\\',",
                "     quoteChar: '\\\"',",
                "     columnNamesAsHeader: true,",
                "     wildcardPaths:['silver/accounts/*.csv']) ~> source",
                "source(output(",
                "          AccountId as integer,",
                "          HashKey as long",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     format: 'query',",
                "     store: 'sqlserver',",
                "     query: 'SELECT AccountId, HashKey FROM dbo.accounts WHERE IsActive = 1',",
                "     isolationLevel: 'READ_UNCOMMITTED') ~> target",
                "RenameColumns derive(src_Hashkey = crc32(toString(src_AccountId), toString(src_CustomerId), src_AccountType, toString(src_Balance))) ~> AddHashkeycolumn",
                "AddHashkeycolumn, target lookup(src_AccountId == AccountId,",
                "     multiple: false,",
                "     pickup: 'any',",
                "     broadcast: 'auto')~> Lookup",
                "source select(mapColumn(",
                "          each(match(1==1),",
                "               concat('src_',$$) = $$)",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> RenameColumns",
                "Lookup split(isNull(AccountId),",
                "     src_AccountId==AccountId && src_Hashkey !=HashKey,",
                "     disjoint: false) ~> split@(Insert, Update)",
                "split@Update derive(src_updatedby = 'dataflow - updated',",
                "          src_updateddate = currentTimestamp(),",
                "          src_IsActive = 0) ~> AuditColumns",
                "AuditColumns alterRow(updateIf(1==1)) ~> alterRow",
                "split@Insert, split@Update union(byName: true)~> union",
                "union derive(src_createdby = 'dataflow',",
                "          src_updatedby = 'dataflow',",
                "          src_createddate = currentTimestamp(),",
                "          src_updateddate = currentTimestamp(),",
                "          src_IsActive = 1) ~> AuditColumn",
                "alterRow sink(allowSchemaDrift: false,",
                "     validateSchema: false,",
                "     input(",
                "          AccountId as integer,",
                "          CustomerId as integer,",
                "          AccountType as string,",
                "          Balance as decimal(20,2),",
                "          CREATEDBY as string,",
                "          UPDATEDBY as string,",
                "          CREADTEDDATE as timestamp,",
                "          UPDATEDDATE as timestamp,",
                "          HashKey as long,",
                "          IsActive as integer",
                "     ),",
                "     format: 'table',",
                "     store: 'sqlserver',",
                "     schemaName: 'dbo',",
                "     tableName: 'accounts',",
                "     insertable: false,",
                "     updateable: true,",
                "     deletable: false,",
                "     upsertable: false,",
                "     keys:['AccountId'],",
                "     stagingSchemaName: '',",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     errorHandlingOption: 'stopOnFirstError',",
                "     mapColumn(",
                "          AccountId,",
                "          UPDATEDBY = src_updatedby,",
                "          UPDATEDDATE = src_updateddate,",
                "          HashKey,",
                "          IsActive = src_IsActive",
                "     )) ~> UpdateSink",
                "AuditColumn sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     input(",
                "          AccountId as integer,",
                "          CustomerId as integer,",
                "          AccountType as string,",
                "          Balance as decimal(20,2),",
                "          CREATEDBY as string,",
                "          UPDATEDBY as string,",
                "          CREADTEDDATE as timestamp,",
                "          UPDATEDDATE as timestamp,",
                "          HashKey as long,",
                "          IsActive as integer",
                "     ),",
                "     format: 'table',",
                "     store: 'sqlserver',",
                "     schemaName: 'dbo',",
                "     tableName: 'accounts',",
                "     insertable: true,",
                "     updateable: false,",
                "     deletable: false,",
                "     upsertable: false,",
                "     stagingSchemaName: '',",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true,",
                "     errorHandlingOption: 'stopOnFirstError',",
                "     mapColumn(",
                "          AccountId = src_AccountId,",
                "          CustomerId = src_CustomerId,",
                "          AccountType = src_AccountType,",
                "          Balance = src_Balance,",
                "          CREATEDBY = src_createdby,",
                "          UPDATEDBY = src_updatedby,",
                "          CREADTEDDATE = src_createddate,",
                "          UPDATEDDATE = src_updateddate,",
                "          HashKey = src_Hashkey,",
                "          IsActive = src_IsActive",
                "     )) ~> InsertSink"
            ]
        }
    }
}
